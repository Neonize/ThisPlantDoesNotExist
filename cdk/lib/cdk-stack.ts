import * as cdk from 'aws-cdk-lib';
import { CfnOutput, RemovalPolicy, Stack } from 'aws-cdk-lib';
import { Certificate, CertificateValidation } from 'aws-cdk-lib/aws-certificatemanager';
import { CachePolicy, Distribution, ViewerProtocolPolicy } from 'aws-cdk-lib/aws-cloudfront';
import { S3Origin } from 'aws-cdk-lib/aws-cloudfront-origins';
import { Effect, FederatedPrincipal, PolicyStatement, Role } from 'aws-cdk-lib/aws-iam';
import { ARecord, HostedZone, RecordTarget } from 'aws-cdk-lib/aws-route53';
import { CloudFrontTarget } from 'aws-cdk-lib/aws-route53-targets';
import { Bucket, BucketEncryption } from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';
// import * as sqs from 'aws-cdk-lib/aws-sqs';

export class CdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const deployRole = new Role(this, 'Role', {
      assumedBy: new FederatedPrincipal('arn:aws:iam::' + Stack.of(this).account + ':oidc-provider/token.actions.githubusercontent.com', {
        "StringEquals": {
          "token.actions.githubusercontent.com:sub": "repo:Neonize/ThisPlantDoesNotExist:*",
          "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
        },
      },
        "sts:AssumeRoleWithWebIdentity"
      ),
      description: 'Deployment Role for Github Actions',
      roleName: "thisplandoesnotexist-deploy", // dieser Name muss in der GA angegeben werden
    })

    // needed for CDK Deployment
    deployRole.addToPolicy(new PolicyStatement({
      actions: ["sts:AssumeRole"],
      resources: ["arn:aws:iam::*:role/cdk-*"],
      effect: Effect.ALLOW
    }))

    // needed for pipeline
    deployRole.addToPolicy(new PolicyStatement({
      actions: ["cloudformation:DescribeStacks"],
      resources: ["*"],
      effect: Effect.ALLOW
    }))

    const bucket = new Bucket(this, 'website-bucket', {
      removalPolicy: RemovalPolicy.DESTROY,
      encryption: BucketEncryption.S3_MANAGED,
    })
    bucket.grantReadWrite(deployRole)

    const importedHostedZone = HostedZone.fromHostedZoneAttributes(this, 'hostedZone', {
      zoneName: 'vmartens.de',
      hostedZoneId: 'Z34DHZ4ILORSGJ',
    })

    const cert = new Certificate(this, 'Certificate', {
      domainName: 'plants.vmartens.de',
      certificateName: 'Plants', // Optionally provide an certificate name
      validation: CertificateValidation.fromDns(importedHostedZone),
    });

    const distribution = new Distribution(this, 'cloudfront', {
      defaultBehavior: {
        origin: new S3Origin(bucket),
        viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
        cachePolicy: CachePolicy.CACHING_OPTIMIZED,
      },
      certificate: cert,
      domainNames: ['plants.vmartens.de'],
      defaultRootObject: 'index.html'
    });

    new ARecord(this, 'AliasRecord', {
      zone: importedHostedZone,
      target: RecordTarget.fromAlias(new CloudFrontTarget(distribution)),
    });

    new CfnOutput(this, 'bucketName', {
      description: 'the bucket name, generated by cdk',
      value: bucket.bucketName
    })
  }
}
